//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OSS.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class OssEntities : DbContext
    {
        public OssEntities()
            : base("name=OssEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<tblAcademicQulDtl> tblAcademicQulDtl { get; set; }
        public virtual DbSet<tblAccount> tblAccount { get; set; }
        public virtual DbSet<tblAccountsOBDtl> tblAccountsOBDtl { get; set; }
        public virtual DbSet<tblAccountsOBMst> tblAccountsOBMst { get; set; }
        public virtual DbSet<tblActiveSchool> tblActiveSchool { get; set; }
        public virtual DbSet<tblActiveSession> tblActiveSession { get; set; }
        public virtual DbSet<tblAdmission> tblAdmission { get; set; }
        public virtual DbSet<tblAdverSourceDtl> tblAdverSourceDtl { get; set; }
        public virtual DbSet<tblAdvertismentSource> tblAdvertismentSource { get; set; }
        public virtual DbSet<tblAllowance> tblAllowance { get; set; }
        public virtual DbSet<tblAllowanceType> tblAllowanceType { get; set; }
        public virtual DbSet<tblApplyInstallment> tblApplyInstallment { get; set; }
        public virtual DbSet<tblArea> tblArea { get; set; }
        public virtual DbSet<tblAttendanceLog> tblAttendanceLog { get; set; }
        public virtual DbSet<tblBank> tblBank { get; set; }
        public virtual DbSet<tblBankPaymentDtl> tblBankPaymentDtl { get; set; }
        public virtual DbSet<tblBankPaymentMst> tblBankPaymentMst { get; set; }
        public virtual DbSet<tblBankReceiptDtl> tblBankReceiptDtl { get; set; }
        public virtual DbSet<tblBankReceiptMst> tblBankReceiptMst { get; set; }
        public virtual DbSet<tblBrand> tblBrand { get; set; }
        public virtual DbSet<tblBrEduDtl> tblBrEduDtl { get; set; }
        public virtual DbSet<tblCashPaymentDtl> tblCashPaymentDtl { get; set; }
        public virtual DbSet<tblCashPaymentMst> tblCashPaymentMst { get; set; }
        public virtual DbSet<tblCashReceiptDtl> tblCashReceiptDtl { get; set; }
        public virtual DbSet<tblCashReceiptMst> tblCashReceiptMst { get; set; }
        public virtual DbSet<tblCategory> tblCategory { get; set; }
        public virtual DbSet<tblChallanNo> tblChallanNo { get; set; }
        public virtual DbSet<tblCity> tblCity { get; set; }
        public virtual DbSet<tblClassDtl> tblClassDtl { get; set; }
        public virtual DbSet<tblClassMst> tblClassMst { get; set; }
        public virtual DbSet<tblConfiguration> tblConfiguration { get; set; }
        public virtual DbSet<tblConObserDtl> tblConObserDtl { get; set; }
        public virtual DbSet<tblCountry> tblCountry { get; set; }
        public virtual DbSet<tblDefineCourseDtl> tblDefineCourseDtl { get; set; }
        public virtual DbSet<tblDefineCourseMst> tblDefineCourseMst { get; set; }
        public virtual DbSet<tblDefineFeesDtl> tblDefineFeesDtl { get; set; }
        public virtual DbSet<tblDefineFeesMst> tblDefineFeesMst { get; set; }
        public virtual DbSet<tblDefineFeesStudentDtl> tblDefineFeesStudentDtl { get; set; }
        public virtual DbSet<tblDefineFeesStudentMst> tblDefineFeesStudentMst { get; set; }
        public virtual DbSet<tblDefineSalaryDtl> tblDefineSalaryDtl { get; set; }
        public virtual DbSet<tblDefineSalaryMst> tblDefineSalaryMst { get; set; }
        public virtual DbSet<tblDefineSubjectDtl> tblDefineSubjectDtl { get; set; }
        public virtual DbSet<tblDefineSubjectMst> tblDefineSubjectMst { get; set; }
        public virtual DbSet<tblDepartment> tblDepartment { get; set; }
        public virtual DbSet<tblDesignation> tblDesignation { get; set; }
        public virtual DbSet<tblDiscount> tblDiscount { get; set; }
        public virtual DbSet<tblDocDtl> tblDocDtl { get; set; }
        public virtual DbSet<tblDocument> tblDocument { get; set; }
        public virtual DbSet<tblEmployee> tblEmployee { get; set; }
        public virtual DbSet<tblEmployeeAttendanceDtl> tblEmployeeAttendanceDtl { get; set; }
        public virtual DbSet<tblEmployeeAttendanceMst> tblEmployeeAttendanceMst { get; set; }
        public virtual DbSet<tblExam> tblExam { get; set; }
        public virtual DbSet<tblExamResultDtl> tblExamResultDtl { get; set; }
        public virtual DbSet<tblExamResultMst> tblExamResultMst { get; set; }
        public virtual DbSet<tblFamilyDtl> tblFamilyDtl { get; set; }
        public virtual DbSet<tblFamilyMst> tblFamilyMst { get; set; }
        public virtual DbSet<tblFeesPayDtl> tblFeesPayDtl { get; set; }
        public virtual DbSet<tblFeesPayMst> tblFeesPayMst { get; set; }
        public virtual DbSet<tblFeesReceiveDtl> tblFeesReceiveDtl { get; set; }
        public virtual DbSet<tblFeesReceiveMst> tblFeesReceiveMst { get; set; }
        public virtual DbSet<tblFeesType> tblFeesType { get; set; }
        public virtual DbSet<tblForms> tblForms { get; set; }
        public virtual DbSet<tblGenerateAllowanceDtl> tblGenerateAllowanceDtl { get; set; }
        public virtual DbSet<tblGenerateAllowanceMst> tblGenerateAllowanceMst { get; set; }
        public virtual DbSet<tblGenerateFeesCFDtl> tblGenerateFeesCFDtl { get; set; }
        public virtual DbSet<tblGenerateFeesDtl> tblGenerateFeesDtl { get; set; }
        public virtual DbSet<tblGenerateFeesMst> tblGenerateFeesMst { get; set; }
        public virtual DbSet<tblGenerateSalaryDtl> tblGenerateSalaryDtl { get; set; }
        public virtual DbSet<tblGenerateSalaryMst> tblGenerateSalaryMst { get; set; }
        public virtual DbSet<tblGrade> tblGrade { get; set; }
        public virtual DbSet<tblInstallment> tblInstallment { get; set; }
        public virtual DbSet<tblJournalVoucherDtl> tblJournalVoucherDtl { get; set; }
        public virtual DbSet<tblJournalVoucherMst> tblJournalVoucherMst { get; set; }
        public virtual DbSet<tblLoanAdvPayment> tblLoanAdvPayment { get; set; }
        public virtual DbSet<tblManualSalaryPayDtl> tblManualSalaryPayDtl { get; set; }
        public virtual DbSet<tblManualSalaryPayMst> tblManualSalaryPayMst { get; set; }
        public virtual DbSet<tblMessageFormat> tblMessageFormat { get; set; }
        public virtual DbSet<tblModules> tblModules { get; set; }
        public virtual DbSet<tblOpeningQtyDtl> tblOpeningQtyDtl { get; set; }
        public virtual DbSet<tblOpeningQtyMst> tblOpeningQtyMst { get; set; }
        public virtual DbSet<tblOtherDeduction> tblOtherDeduction { get; set; }
        public virtual DbSet<tblPara> tblPara { get; set; }
        public virtual DbSet<tblParaDtl> tblParaDtl { get; set; }
        public virtual DbSet<tblProduct> tblProduct { get; set; }
        public virtual DbSet<tblProvince> tblProvince { get; set; }
        public virtual DbSet<tblPurchaseInvoice2Dtl> tblPurchaseInvoice2Dtl { get; set; }
        public virtual DbSet<tblPurchaseInvoice2Mst> tblPurchaseInvoice2Mst { get; set; }
        public virtual DbSet<tblQualification> tblQualification { get; set; }
        public virtual DbSet<tblRank> tblRank { get; set; }
        public virtual DbSet<tblReligion> tblReligion { get; set; }
        public virtual DbSet<tblRequisition> tblRequisition { get; set; }
        public virtual DbSet<tblRights> tblRights { get; set; }
        public virtual DbSet<tblRoles> tblRoles { get; set; }
        public virtual DbSet<tblSaleInvoice2Dtl> tblSaleInvoice2Dtl { get; set; }
        public virtual DbSet<tblSaleInvoice2Mst> tblSaleInvoice2Mst { get; set; }
        public virtual DbSet<tblSchool> tblSchool { get; set; }
        public virtual DbSet<tblSection> tblSection { get; set; }
        public virtual DbSet<tblSecurity> tblSecurity { get; set; }
        public virtual DbSet<tblSession> tblSession { get; set; }
        public virtual DbSet<tblStage> tblStage { get; set; }
        public virtual DbSet<tblStudentAttendanceDtl> tblStudentAttendanceDtl { get; set; }
        public virtual DbSet<tblStudentAttendanceMst> tblStudentAttendanceMst { get; set; }
        public virtual DbSet<tblStudentRegMst> tblStudentRegMst { get; set; }
        public virtual DbSet<tblStudentsInfo> tblStudentsInfo { get; set; }
        public virtual DbSet<tblSubject> tblSubject { get; set; }
        public virtual DbSet<tblTranClassMst> tblTranClassMst { get; set; }
        public virtual DbSet<tblTranFromClassDtl> tblTranFromClassDtl { get; set; }
        public virtual DbSet<tblTranToClassDtl> tblTranToClassDtl { get; set; }
        public virtual DbSet<tblUser> tblUser { get; set; }
        public virtual DbSet<tblVendor> tblVendor { get; set; }
        public virtual DbSet<tblGeneralLedger> tblGeneralLedger { get; set; }
        public virtual DbSet<tblStockBalance> tblStockBalance { get; set; }
        public virtual DbSet<V_Ledger> V_Ledger { get; set; }
        public virtual DbSet<Vu_BankPayment> Vu_BankPayment { get; set; }
        public virtual DbSet<Vu_BankReceipt> Vu_BankReceipt { get; set; }
        public virtual DbSet<Vu_CashPayment> Vu_CashPayment { get; set; }
        public virtual DbSet<Vu_CashReceipt> Vu_CashReceipt { get; set; }
        public virtual DbSet<Vu_CasualLeaves> Vu_CasualLeaves { get; set; }
        public virtual DbSet<Vu_ChartOfAccounts> Vu_ChartOfAccounts { get; set; }
        public virtual DbSet<Vu_Class> Vu_Class { get; set; }
        public virtual DbSet<Vu_EmployeesLedger> Vu_EmployeesLedger { get; set; }
        public virtual DbSet<Vu_LoanAdvance> Vu_LoanAdvance { get; set; }
        public virtual DbSet<Vu_PendingCheques> Vu_PendingCheques { get; set; }
        public virtual DbSet<Vu_ProfitandLossProductWise> Vu_ProfitandLossProductWise { get; set; }
        public virtual DbSet<Vu_RefundableFees> Vu_RefundableFees { get; set; }
        public virtual DbSet<Vu_SickLeaves> Vu_SickLeaves { get; set; }
        public virtual DbSet<Vu_StudentLedger> Vu_StudentLedger { get; set; }
        public virtual DbSet<Vu_StudentsInfo> Vu_StudentsInfo { get; set; }
        public virtual DbSet<Vu_StudentsList> Vu_StudentsList { get; set; }
    
        public virtual ObjectResult<SP_AccountLedger_Result> SP_AccountLedger(string accountCode, Nullable<int> schoolID, Nullable<int> sessionID, string startDate, string endDate, string accountType)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var accountTypeParameter = accountType != null ?
                new ObjectParameter("AccountType", accountType) :
                new ObjectParameter("AccountType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AccountLedger_Result>("SP_AccountLedger", accountCodeParameter, schoolIDParameter, sessionIDParameter, startDateParameter, endDateParameter, accountTypeParameter);
        }
    
        public virtual ObjectResult<SP_AdvSourceWise_Result> SP_AdvSourceWise(Nullable<int> advSourceID, Nullable<int> schoolID, Nullable<bool> isAdmit, Nullable<int> sessionID)
        {
            var advSourceIDParameter = advSourceID.HasValue ?
                new ObjectParameter("AdvSourceID", advSourceID) :
                new ObjectParameter("AdvSourceID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var isAdmitParameter = isAdmit.HasValue ?
                new ObjectParameter("IsAdmit", isAdmit) :
                new ObjectParameter("IsAdmit", typeof(bool));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AdvSourceWise_Result>("SP_AdvSourceWise", advSourceIDParameter, schoolIDParameter, isAdmitParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_AreaWise_Result> SP_AreaWise(Nullable<int> areaID, Nullable<int> schoolID, Nullable<bool> isAdmit, Nullable<int> sessionID)
        {
            var areaIDParameter = areaID.HasValue ?
                new ObjectParameter("AreaID", areaID) :
                new ObjectParameter("AreaID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var isAdmitParameter = isAdmit.HasValue ?
                new ObjectParameter("IsAdmit", isAdmit) :
                new ObjectParameter("IsAdmit", typeof(bool));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AreaWise_Result>("SP_AreaWise", areaIDParameter, schoolIDParameter, isAdmitParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_AttendanceLog_Result> SP_AttendanceLog(Nullable<int> schoolID, string fromDate, string toDate)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_AttendanceLog_Result>("SP_AttendanceLog", schoolIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_BankPayment_Result> SP_BankPayment(string bPNo, Nullable<int> schoolID, string accountCode, Nullable<int> sessionID)
        {
            var bPNoParameter = bPNo != null ?
                new ObjectParameter("BPNo", bPNo) :
                new ObjectParameter("BPNo", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BankPayment_Result>("SP_BankPayment", bPNoParameter, schoolIDParameter, accountCodeParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_BankReceipt_Result> SP_BankReceipt(string bRNo, Nullable<int> schoolID, string accountCode, Nullable<int> sessionID)
        {
            var bRNoParameter = bRNo != null ?
                new ObjectParameter("BRNo", bRNo) :
                new ObjectParameter("BRNo", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BankReceipt_Result>("SP_BankReceipt", bRNoParameter, schoolIDParameter, accountCodeParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_CashPayment_Result> SP_CashPayment(string cPNo, Nullable<int> schoolID, string accountCode, Nullable<int> sessionID)
        {
            var cPNoParameter = cPNo != null ?
                new ObjectParameter("CPNo", cPNo) :
                new ObjectParameter("CPNo", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CashPayment_Result>("SP_CashPayment", cPNoParameter, schoolIDParameter, accountCodeParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_CashReceipt_Result> SP_CashReceipt(string cRNo, Nullable<int> schoolID, string accountCode, Nullable<int> sessionID)
        {
            var cRNoParameter = cRNo != null ?
                new ObjectParameter("CRNo", cRNo) :
                new ObjectParameter("CRNo", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CashReceipt_Result>("SP_CashReceipt", cRNoParameter, schoolIDParameter, accountCodeParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_CityWise_Result> SP_CityWise(Nullable<int> cityID, Nullable<int> schoolID, Nullable<bool> isAdmit, Nullable<int> sessionID)
        {
            var cityIDParameter = cityID.HasValue ?
                new ObjectParameter("CityID", cityID) :
                new ObjectParameter("CityID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var isAdmitParameter = isAdmit.HasValue ?
                new ObjectParameter("IsAdmit", isAdmit) :
                new ObjectParameter("IsAdmit", typeof(bool));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CityWise_Result>("SP_CityWise", cityIDParameter, schoolIDParameter, isAdmitParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_CountryWise_Result> SP_CountryWise(Nullable<int> countryID, Nullable<int> schoolID, Nullable<bool> isAdmit, Nullable<int> sessionID)
        {
            var countryIDParameter = countryID.HasValue ?
                new ObjectParameter("CountryID", countryID) :
                new ObjectParameter("CountryID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var isAdmitParameter = isAdmit.HasValue ?
                new ObjectParameter("IsAdmit", isAdmit) :
                new ObjectParameter("IsAdmit", typeof(bool));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CountryWise_Result>("SP_CountryWise", countryIDParameter, schoolIDParameter, isAdmitParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_CourseStructure_Result> SP_CourseStructure(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> schoolID)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_CourseStructure_Result>("SP_CourseStructure", stageIDParameter, classIDParameter, sectionIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<SP_DefaulterList_Result> SP_DefaulterList(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string asOnDate, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var asOnDateParameter = asOnDate != null ?
                new ObjectParameter("AsOnDate", asOnDate) :
                new ObjectParameter("AsOnDate", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DefaulterList_Result>("SP_DefaulterList", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, asOnDateParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_DetailedDefaulterList_Result> SP_DetailedDefaulterList(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string asOnDate, Nullable<int> feesTypeID, Nullable<bool> isActive, Nullable<bool> hostel, Nullable<int> darsgahID, Nullable<bool> loadDarsgahWise)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var asOnDateParameter = asOnDate != null ?
                new ObjectParameter("AsOnDate", asOnDate) :
                new ObjectParameter("AsOnDate", typeof(string));
    
            var feesTypeIDParameter = feesTypeID.HasValue ?
                new ObjectParameter("FeesTypeID", feesTypeID) :
                new ObjectParameter("FeesTypeID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            var darsgahIDParameter = darsgahID.HasValue ?
                new ObjectParameter("DarsgahID", darsgahID) :
                new ObjectParameter("DarsgahID", typeof(int));
    
            var loadDarsgahWiseParameter = loadDarsgahWise.HasValue ?
                new ObjectParameter("LoadDarsgahWise", loadDarsgahWise) :
                new ObjectParameter("LoadDarsgahWise", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DetailedDefaulterList_Result>("SP_DetailedDefaulterList", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, asOnDateParameter, feesTypeIDParameter, isActiveParameter, hostelParameter, darsgahIDParameter, loadDarsgahWiseParameter);
        }
    
        public virtual ObjectResult<SP_DetailedFeesClassWise_Result> SP_DetailedFeesClassWise(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, string chargeFee, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var chargeFeeParameter = chargeFee != null ?
                new ObjectParameter("ChargeFee", chargeFee) :
                new ObjectParameter("ChargeFee", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DetailedFeesClassWise_Result>("SP_DetailedFeesClassWise", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, chargeFeeParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_DetailedFeesCollection_Result> SP_DetailedFeesCollection(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, Nullable<int> userID, Nullable<bool> isActive, Nullable<int> feesTypeID, Nullable<bool> hostel, Nullable<int> darsgahID, Nullable<bool> loadDarsgahWise)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var feesTypeIDParameter = feesTypeID.HasValue ?
                new ObjectParameter("FeesTypeID", feesTypeID) :
                new ObjectParameter("FeesTypeID", typeof(int));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            var darsgahIDParameter = darsgahID.HasValue ?
                new ObjectParameter("DarsgahID", darsgahID) :
                new ObjectParameter("DarsgahID", typeof(int));
    
            var loadDarsgahWiseParameter = loadDarsgahWise.HasValue ?
                new ObjectParameter("LoadDarsgahWise", loadDarsgahWise) :
                new ObjectParameter("LoadDarsgahWise", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DetailedFeesCollection_Result>("SP_DetailedFeesCollection", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, userIDParameter, isActiveParameter, feesTypeIDParameter, hostelParameter, darsgahIDParameter, loadDarsgahWiseParameter);
        }
    
        public virtual ObjectResult<SP_DetailedFeesRegister_Result> SP_DetailedFeesRegister(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, Nullable<int> userID, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DetailedFeesRegister_Result>("SP_DetailedFeesRegister", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, userIDParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_DetailedFeesSummary_Result> SP_DetailedFeesSummary(Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, Nullable<int> feesTypeID, Nullable<int> userID, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var feesTypeIDParameter = feesTypeID.HasValue ?
                new ObjectParameter("FeesTypeID", feesTypeID) :
                new ObjectParameter("FeesTypeID", typeof(int));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DetailedFeesSummary_Result>("SP_DetailedFeesSummary", sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, feesTypeIDParameter, userIDParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_DiscountWise_Result> SP_DiscountWise(Nullable<int> discountID, Nullable<int> schoolID, Nullable<bool> isActive)
        {
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_DiscountWise_Result>("SP_DiscountWise", discountIDParameter, schoolIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SP_EmpAttendanceTime_Result> SP_EmpAttendanceTime(Nullable<int> departmentID, Nullable<int> designationID, string attendanceType, string month, Nullable<int> sessionID, Nullable<int> schoolID)
        {
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var attendanceTypeParameter = attendanceType != null ?
                new ObjectParameter("AttendanceType", attendanceType) :
                new ObjectParameter("AttendanceType", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmpAttendanceTime_Result>("SP_EmpAttendanceTime", departmentIDParameter, designationIDParameter, attendanceTypeParameter, monthParameter, sessionIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<SP_EmpSecurityDeposit_Result> SP_EmpSecurityDeposit(Nullable<int> employeeID, Nullable<int> schoolID, Nullable<int> sessionID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_EmpSecurityDeposit_Result>("SP_EmpSecurityDeposit", employeeIDParameter, schoolIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_ExamResultDetails_Result> SP_ExamResultDetails(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> examID)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ExamResultDetails_Result>("SP_ExamResultDetails", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, examIDParameter);
        }
    
        public virtual ObjectResult<SP_ExamResultSheet_Result> SP_ExamResultSheet(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> examID, Nullable<int> admissionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ExamResultSheet_Result>("SP_ExamResultSheet", sessionIDParameter, schoolIDParameter, examIDParameter, admissionIDParameter);
        }
    
        public virtual ObjectResult<SP_FamilyDetails_Result> SP_FamilyDetails(string fatherName, Nullable<int> schoolID, Nullable<int> sessionID)
        {
            var fatherNameParameter = fatherName != null ?
                new ObjectParameter("FatherName", fatherName) :
                new ObjectParameter("FatherName", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FamilyDetails_Result>("SP_FamilyDetails", fatherNameParameter, schoolIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_FeesClassWise_Result> SP_FeesClassWise(Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, string chargeFee, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var chargeFeeParameter = chargeFee != null ?
                new ObjectParameter("ChargeFee", chargeFee) :
                new ObjectParameter("ChargeFee", typeof(string));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FeesClassWise_Result>("SP_FeesClassWise", sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, chargeFeeParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_FeesCollection_Result> SP_FeesCollection(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, Nullable<int> userID, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FeesCollection_Result>("SP_FeesCollection", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, userIDParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_FeesRegister_Result> SP_FeesRegister(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, Nullable<int> userID, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FeesRegister_Result>("SP_FeesRegister", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, userIDParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_FeesSlip_Result> SP_FeesSlip(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<long> feesReceiveMstID, Nullable<bool> isActive)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var feesReceiveMstIDParameter = feesReceiveMstID.HasValue ?
                new ObjectParameter("FeesReceiveMstID", feesReceiveMstID) :
                new ObjectParameter("FeesReceiveMstID", typeof(long));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FeesSlip_Result>("SP_FeesSlip", sessionIDParameter, schoolIDParameter, feesReceiveMstIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SP_FeesStructure_Result> SP_FeesStructure(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> schoolID)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FeesStructure_Result>("SP_FeesStructure", stageIDParameter, classIDParameter, sectionIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<SP_FeesSummary_Result> SP_FeesSummary(Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate, Nullable<int> userID, Nullable<bool> isActive, Nullable<bool> hostel)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            var userIDParameter = userID.HasValue ?
                new ObjectParameter("UserID", userID) :
                new ObjectParameter("UserID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FeesSummary_Result>("SP_FeesSummary", sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter, userIDParameter, isActiveParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_FeesVoucher_Result> SP_FeesVoucher(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> admissionID, string feesDate, Nullable<bool> showGreater, Nullable<bool> isActive)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            var feesDateParameter = feesDate != null ?
                new ObjectParameter("FeesDate", feesDate) :
                new ObjectParameter("FeesDate", typeof(string));
    
            var showGreaterParameter = showGreater.HasValue ?
                new ObjectParameter("ShowGreater", showGreater) :
                new ObjectParameter("ShowGreater", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_FeesVoucher_Result>("SP_FeesVoucher", sessionIDParameter, schoolIDParameter, admissionIDParameter, feesDateParameter, showGreaterParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SP_GrRegister_Result> SP_GrRegister(Nullable<int> schoolID, Nullable<int> admissionID, Nullable<bool> isActive)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GrRegister_Result>("SP_GrRegister", schoolIDParameter, admissionIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SP_JournalVoucher_Result> SP_JournalVoucher(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<long> jVMstID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var jVMstIDParameter = jVMstID.HasValue ?
                new ObjectParameter("JVMstID", jVMstID) :
                new ObjectParameter("JVMstID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_JournalVoucher_Result>("SP_JournalVoucher", sessionIDParameter, schoolIDParameter, jVMstIDParameter);
        }
    
        public virtual ObjectResult<SP_MonthlyFeesDetails_Result> SP_MonthlyFeesDetails(Nullable<int> sessionID, Nullable<int> schoolID, string fromDate, string toDate)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var fromDateParameter = fromDate != null ?
                new ObjectParameter("FromDate", fromDate) :
                new ObjectParameter("FromDate", typeof(string));
    
            var toDateParameter = toDate != null ?
                new ObjectParameter("ToDate", toDate) :
                new ObjectParameter("ToDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MonthlyFeesDetails_Result>("SP_MonthlyFeesDetails", sessionIDParameter, schoolIDParameter, fromDateParameter, toDateParameter);
        }
    
        public virtual ObjectResult<SP_MultipleFeesVoucher_Result> SP_MultipleFeesVoucher(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, string feesDate, Nullable<bool> showGreater, Nullable<bool> isActive, Nullable<int> darsgahID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var feesDateParameter = feesDate != null ?
                new ObjectParameter("FeesDate", feesDate) :
                new ObjectParameter("FeesDate", typeof(string));
    
            var showGreaterParameter = showGreater.HasValue ?
                new ObjectParameter("ShowGreater", showGreater) :
                new ObjectParameter("ShowGreater", typeof(bool));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var darsgahIDParameter = darsgahID.HasValue ?
                new ObjectParameter("DarsgahID", darsgahID) :
                new ObjectParameter("DarsgahID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_MultipleFeesVoucher_Result>("SP_MultipleFeesVoucher", sessionIDParameter, schoolIDParameter, stageIDParameter, classIDParameter, sectionIDParameter, feesDateParameter, showGreaterParameter, isActiveParameter, darsgahIDParameter);
        }
    
        public virtual ObjectResult<SP_PIItemWise_Result> SP_PIItemWise(string startDate, string endDate, Nullable<int> schoolID, Nullable<int> productid, Nullable<int> brandid, Nullable<int> vendorID)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("Productid", productid) :
                new ObjectParameter("Productid", typeof(int));
    
            var brandidParameter = brandid.HasValue ?
                new ObjectParameter("Brandid", brandid) :
                new ObjectParameter("Brandid", typeof(int));
    
            var vendorIDParameter = vendorID.HasValue ?
                new ObjectParameter("VendorID", vendorID) :
                new ObjectParameter("VendorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PIItemWise_Result>("SP_PIItemWise", startDateParameter, endDateParameter, schoolIDParameter, productidParameter, brandidParameter, vendorIDParameter);
        }
    
        public virtual ObjectResult<SP_ProfitandLossProductWise_Result> SP_ProfitandLossProductWise(Nullable<long> productID, Nullable<int> brandid, Nullable<int> schoolID, string startDate, string endDate, Nullable<int> sessionID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            var brandidParameter = brandid.HasValue ?
                new ObjectParameter("Brandid", brandid) :
                new ObjectParameter("Brandid", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProfitandLossProductWise_Result>("SP_ProfitandLossProductWise", productIDParameter, brandidParameter, schoolIDParameter, startDateParameter, endDateParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_ProvinceWise_Result> SP_ProvinceWise(Nullable<int> provinceID, Nullable<int> schoolID, Nullable<bool> isAdmit, Nullable<int> sessionID)
        {
            var provinceIDParameter = provinceID.HasValue ?
                new ObjectParameter("ProvinceID", provinceID) :
                new ObjectParameter("ProvinceID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var isAdmitParameter = isAdmit.HasValue ?
                new ObjectParameter("IsAdmit", isAdmit) :
                new ObjectParameter("IsAdmit", typeof(bool));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ProvinceWise_Result>("SP_ProvinceWise", provinceIDParameter, schoolIDParameter, isAdmitParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_PurchaseInvoice_Result> SP_PurchaseInvoice(string pINo, Nullable<int> schoolID, string sortBy)
        {
            var pINoParameter = pINo != null ?
                new ObjectParameter("PINo", pINo) :
                new ObjectParameter("PINo", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PurchaseInvoice_Result>("SP_PurchaseInvoice", pINoParameter, schoolIDParameter, sortByParameter);
        }
    
        public virtual ObjectResult<SP_SalarySlip_Result> SP_SalarySlip(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> employeeID, string salaryDate)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var salaryDateParameter = salaryDate != null ?
                new ObjectParameter("SalaryDate", salaryDate) :
                new ObjectParameter("SalaryDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalarySlip_Result>("SP_SalarySlip", sessionIDParameter, schoolIDParameter, employeeIDParameter, salaryDateParameter);
        }
    
        public virtual ObjectResult<SP_SalaryStructure_Result> SP_SalaryStructure(Nullable<int> employeeID, Nullable<int> schoolID)
        {
            var employeeIDParameter = employeeID.HasValue ?
                new ObjectParameter("EmployeeID", employeeID) :
                new ObjectParameter("EmployeeID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalaryStructure_Result>("SP_SalaryStructure", employeeIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<SP_SalarySummary_Result> SP_SalarySummary(Nullable<int> designationID, Nullable<int> departmentID, string startDate, string endDate, Nullable<int> schoolID, Nullable<int> sessionID, string status)
        {
            var designationIDParameter = designationID.HasValue ?
                new ObjectParameter("DesignationID", designationID) :
                new ObjectParameter("DesignationID", typeof(int));
    
            var departmentIDParameter = departmentID.HasValue ?
                new ObjectParameter("DepartmentID", departmentID) :
                new ObjectParameter("DepartmentID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SalarySummary_Result>("SP_SalarySummary", designationIDParameter, departmentIDParameter, startDateParameter, endDateParameter, schoolIDParameter, sessionIDParameter, statusParameter);
        }
    
        public virtual ObjectResult<SP_SaleInvoice_Result> SP_SaleInvoice(string sINo, Nullable<int> schoolID, string sortBy)
        {
            var sINoParameter = sINo != null ?
                new ObjectParameter("SINo", sINo) :
                new ObjectParameter("SINo", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SaleInvoice_Result>("SP_SaleInvoice", sINoParameter, schoolIDParameter, sortByParameter);
        }
    
        public virtual ObjectResult<SP_School_Result> SP_School(Nullable<int> schoolID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_School_Result>("SP_School", schoolIDParameter);
        }
    
        public virtual ObjectResult<SP_SIItemWise_Result> SP_SIItemWise(string startDate, string endDate, Nullable<int> schoolID, Nullable<int> productid, Nullable<int> brandid, Nullable<int> admissionID)
        {
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var productidParameter = productid.HasValue ?
                new ObjectParameter("Productid", productid) :
                new ObjectParameter("Productid", typeof(int));
    
            var brandidParameter = brandid.HasValue ?
                new ObjectParameter("Brandid", brandid) :
                new ObjectParameter("Brandid", typeof(int));
    
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SIItemWise_Result>("SP_SIItemWise", startDateParameter, endDateParameter, schoolIDParameter, productidParameter, brandidParameter, admissionIDParameter);
        }
    
        public virtual ObjectResult<SP_StockInHand_Result> SP_StockInHand(string asOnDate, Nullable<int> schoolID, Nullable<long> productID, Nullable<int> brandID)
        {
            var asOnDateParameter = asOnDate != null ?
                new ObjectParameter("AsOnDate", asOnDate) :
                new ObjectParameter("AsOnDate", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(long));
    
            var brandIDParameter = brandID.HasValue ?
                new ObjectParameter("BrandID", brandID) :
                new ObjectParameter("BrandID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StockInHand_Result>("SP_StockInHand", asOnDateParameter, schoolIDParameter, productIDParameter, brandIDParameter);
        }
    
        public virtual ObjectResult<SP_StudentAttendanceTime_Result> SP_StudentAttendanceTime(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, string attendanceType, string month, Nullable<int> sessionID, Nullable<int> schoolID)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var attendanceTypeParameter = attendanceType != null ?
                new ObjectParameter("AttendanceType", attendanceType) :
                new ObjectParameter("AttendanceType", typeof(string));
    
            var monthParameter = month != null ?
                new ObjectParameter("Month", month) :
                new ObjectParameter("Month", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentAttendanceTime_Result>("SP_StudentAttendanceTime", stageIDParameter, classIDParameter, sectionIDParameter, attendanceTypeParameter, monthParameter, sessionIDParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<SP_StudentIDCard_Result> SP_StudentIDCard(Nullable<int> schoolID, Nullable<int> sessionID, Nullable<int> admissionID)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentIDCard_Result>("SP_StudentIDCard", schoolIDParameter, sessionIDParameter, admissionIDParameter);
        }
    
        public virtual ObjectResult<SP_StudentLedger_Result> SP_StudentLedger(string accountCode, Nullable<int> schoolID, string startDate, string endDate, Nullable<int> sessionID)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentLedger_Result>("SP_StudentLedger", accountCodeParameter, schoolIDParameter, startDateParameter, endDateParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_StudentsBalance_Result> SP_StudentsBalance(Nullable<int> schoolID, string date)
        {
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentsBalance_Result>("SP_StudentsBalance", schoolIDParameter, dateParameter);
        }
    
        public virtual ObjectResult<SP_StudentsDiscountWise_Result> SP_StudentsDiscountWise(Nullable<int> discountID, Nullable<int> schoolID, Nullable<int> sessionID, Nullable<bool> isActive)
        {
            var discountIDParameter = discountID.HasValue ?
                new ObjectParameter("DiscountID", discountID) :
                new ObjectParameter("DiscountID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentsDiscountWise_Result>("SP_StudentsDiscountWise", discountIDParameter, schoolIDParameter, sessionIDParameter, isActiveParameter);
        }
    
        public virtual ObjectResult<SP_StudentsFeesList_Result> SP_StudentsFeesList(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> admissionID, Nullable<bool> isActive, Nullable<int> feesTypeID, Nullable<bool> hostel)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            var isActiveParameter = isActive.HasValue ?
                new ObjectParameter("IsActive", isActive) :
                new ObjectParameter("IsActive", typeof(bool));
    
            var feesTypeIDParameter = feesTypeID.HasValue ?
                new ObjectParameter("FeesTypeID", feesTypeID) :
                new ObjectParameter("FeesTypeID", typeof(int));
    
            var hostelParameter = hostel.HasValue ?
                new ObjectParameter("Hostel", hostel) :
                new ObjectParameter("Hostel", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentsFeesList_Result>("SP_StudentsFeesList", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, admissionIDParameter, isActiveParameter, feesTypeIDParameter, hostelParameter);
        }
    
        public virtual ObjectResult<SP_StudentsGradeWise_Result> SP_StudentsGradeWise(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> examID, Nullable<int> gradeID, Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var gradeIDParameter = gradeID.HasValue ?
                new ObjectParameter("GradeID", gradeID) :
                new ObjectParameter("GradeID", typeof(int));
    
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentsGradeWise_Result>("SP_StudentsGradeWise", sessionIDParameter, schoolIDParameter, examIDParameter, gradeIDParameter, stageIDParameter, classIDParameter, sectionIDParameter);
        }
    
        public virtual ObjectResult<SP_StudentsInfo_Result> SP_StudentsInfo(Nullable<int> admissionID, Nullable<int> schoolID, Nullable<int> sessionID)
        {
            var admissionIDParameter = admissionID.HasValue ?
                new ObjectParameter("AdmissionID", admissionID) :
                new ObjectParameter("AdmissionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentsInfo_Result>("SP_StudentsInfo", admissionIDParameter, schoolIDParameter, sessionIDParameter);
        }
    
        public virtual ObjectResult<SP_StudentsList_Result> SP_StudentsList(Nullable<int> stageID, Nullable<int> classID, Nullable<int> sectionID, Nullable<int> sessionID, Nullable<int> schoolID, string sortBy)
        {
            var stageIDParameter = stageID.HasValue ?
                new ObjectParameter("StageID", stageID) :
                new ObjectParameter("StageID", typeof(int));
    
            var classIDParameter = classID.HasValue ?
                new ObjectParameter("ClassID", classID) :
                new ObjectParameter("ClassID", typeof(int));
    
            var sectionIDParameter = sectionID.HasValue ?
                new ObjectParameter("SectionID", sectionID) :
                new ObjectParameter("SectionID", typeof(int));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var sortByParameter = sortBy != null ?
                new ObjectParameter("SortBy", sortBy) :
                new ObjectParameter("SortBy", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentsList_Result>("SP_StudentsList", stageIDParameter, classIDParameter, sectionIDParameter, sessionIDParameter, schoolIDParameter, sortByParameter);
        }
    
        public virtual ObjectResult<SP_StudentsRankWise_Result> SP_StudentsRankWise(Nullable<int> sessionID, Nullable<int> schoolID, Nullable<int> examID, Nullable<int> rankID)
        {
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            var rankIDParameter = rankID.HasValue ?
                new ObjectParameter("RankID", rankID) :
                new ObjectParameter("RankID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_StudentsRankWise_Result>("SP_StudentsRankWise", sessionIDParameter, schoolIDParameter, examIDParameter, rankIDParameter);
        }
    
        public virtual ObjectResult<SP_VendorBalance_Result> SP_VendorBalance(string date, Nullable<int> schoolID)
        {
            var dateParameter = date != null ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VendorBalance_Result>("SP_VendorBalance", dateParameter, schoolIDParameter);
        }
    
        public virtual ObjectResult<SP_VendorLedger_Result> SP_VendorLedger(string accountCode, Nullable<int> schoolID, string startDate, string endDate, Nullable<int> sessionID)
        {
            var accountCodeParameter = accountCode != null ?
                new ObjectParameter("AccountCode", accountCode) :
                new ObjectParameter("AccountCode", typeof(string));
    
            var schoolIDParameter = schoolID.HasValue ?
                new ObjectParameter("SchoolID", schoolID) :
                new ObjectParameter("SchoolID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            var endDateParameter = endDate != null ?
                new ObjectParameter("EndDate", endDate) :
                new ObjectParameter("EndDate", typeof(string));
    
            var sessionIDParameter = sessionID.HasValue ?
                new ObjectParameter("SessionID", sessionID) :
                new ObjectParameter("SessionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_VendorLedger_Result>("SP_VendorLedger", accountCodeParameter, schoolIDParameter, startDateParameter, endDateParameter, sessionIDParameter);
        }
    }
}
